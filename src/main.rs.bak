use std::fs::metadata;
use std::time::SystemTime;
use std::env;
use std::io;
use std::io::prelude::*;
use std::fs::File;
use std::cmp;

fn main() -> io::Result<()>  {

    let mut homes = vec![];
    dents("/home/", false, &mut homes);
    let mut mailboxes = vec![];
    for home in homes {
        dents(&(home.path + "homes/"), false, &mut mailboxes);
    }
    let dirs = vec!["Maildir/new/", "Maildir/cur/", "Maildir/.Trash/new/", "Maildir/.Trash/cur/", "Maildir/.Junk/new/", "Maildir/.Junk/cur/"];
    let mut maildirs = vec![];
    for mbox in mailboxes {
        for dir in &dirs {
            maildirs.push(mbox.path.to_owned() + dir);
        }
    }
    let mut files = Vec::with_capacity(60_000);
    for mdir in maildirs {
        dents(&mdir, true, &mut files);
    }
    files.sort_by(|a, b| {
        a.time.cmp(&b.time).reverse()
    });
    for file in &files[..5] {
        println!("{:?} - {:?}", file.path, file.time);
    }
    println!("{}", files.len());

    let args: Vec<String> = env::args().collect();
    if args.len() == 1 { return Ok(()); }
    let needle = &args[1];

    let max = cmp::min(files.len(), 300);
    for file in &files[..max] {
        let mut buffer = vec![0; 3000];
        let mut f = File::open(&file.path)?;
        f.read(&mut buffer)?;
        let haystack = match String::from_utf8(buffer) {
            Ok(valid) => valid,
            Err(error) => {
                let up_to = error.utf8_error().valid_up_to();
                let mut buf = error.into_bytes();
                buf.truncate(up_to);
                String::from_utf8(buf).unwrap()
            }
        };
        if haystack.contains(&needle[..]) {
            println!("foundz: {} in {}", &needle, &file.path);
            return Ok(());
        }
    }

    Ok(())
}


extern crate nc;

struct Entry {
    path: String,
    time: SystemTime,
}

fn dents(dirname: &str, only_files: bool, entries: &mut Vec<Entry>)  {
    if dirname.chars().last().unwrap() != '/' {
        panic!("dirname must end with slash!");
    }
    let now = SystemTime::now();

    let fd = match nc::openat(nc::AT_FDCWD, dirname, nc::O_RDONLY | nc::O_DIRECTORY, 0) {
        Ok(fd) => fd,
        Err(_) => return
    };

    loop {
        match nc::getdents64(fd) {
            Ok(files) => {
                if files.is_empty() {
                    break;
                }

                for mut file in files {
                    //println!("file: {:?}", file);
                    if only_files { 
                        if file.d_type as nc::mode_t == nc::DT_REG { 
                            //let path = dirname.to_owned() + &file.d_name;
                            //let meta = metadata(&path).unwrap();
                            //let time = meta.modified().unwrap();
                            //entries.push(Entry{path, time});
                            file.d_name.insert_str(0, &dirname[..]);
                            let meta = metadata(&file.d_name).unwrap();
                            let time = meta.modified().unwrap();
                            entries.push(Entry{path: file.d_name, time});
                        }
                    } else {
                        if file.d_type as nc::mode_t == nc::DT_DIR { 
                            if  file.d_name == "." || file.d_name == ".." { continue; }
                            let path = dirname.to_owned() + &file.d_name + "/";
                            entries.push(Entry{path, time: now});
                        }
                    }
                }
            }
            Err(err) => {
                eprintln!("err: {}", err);
                break;
            }
        }
    }

    let _ = nc::close(fd).expect("Failed to close fd");
}

